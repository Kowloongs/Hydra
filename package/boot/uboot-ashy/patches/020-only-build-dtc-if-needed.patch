From e0dd6ac5385598057fb5b5144300d4cedb77d667 Mon Sep 17 00:00:00 2001
From: "Carlyon W. Tung" <loongs@syuusui.com>
Date: Tue, 4 Jul 2023 00:51:05 +0800
Subject: [PATCH 20/20] only build dtc if needed

---
 Makefile               | 28 ++--------------------------
 doc/build/gcc.rst      | 21 ---------------------
 dts/Kconfig            |  4 ++++
 scripts/Makefile       |  1 +
 scripts/dtc-version.sh |  7 +------
 5 files changed, 8 insertions(+), 53 deletions(-)

diff --git a/Makefile b/Makefile
index 40c1cd14..b2e86ad9 100644
--- a/Makefile
+++ b/Makefile
@@ -414,12 +414,7 @@ PYTHON		?= python
 PYTHON2		= python2
 PYTHON3		?= python3
 
-# The devicetree compiler and pylibfdt are automatically built unless DTC is
-# provided. If DTC is provided, it is assumed the pylibfdt is available too.
-DTC_INTREE	:= $(objtree)/scripts/dtc/dtc
-DTC		?= $(DTC_INTREE)
-DTC_MIN_VERSION	:= 010406
-
+DTC		?= $(objtree)/scripts/dtc/dtc
 CHECK		= sparse
 
 CHECKFLAGS     := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ \
@@ -2073,26 +2068,7 @@ endif
 # Check dtc and pylibfdt, if DTC is provided, else build them
 PHONY += scripts_dtc
 scripts_dtc: scripts_basic
-	$(Q)if test "$(DTC)" = "$(DTC_INTREE)"; then \
-		$(MAKE) $(build)=scripts/dtc; \
-	else \
-		if ! $(DTC) -v >/dev/null; then \
-			echo '*** Failed to check dtc version: $(DTC)'; \
-			false; \
-		else \
-			if test "$(call dtc-version)" -lt $(DTC_MIN_VERSION); then \
-				echo '*** Your dtc is too old, please upgrade to dtc $(DTC_MIN_VERSION) or newer'; \
-				false; \
-			else \
-				if [ -n "$(CONFIG_PYLIBFDT)" ]; then \
-					if ! echo "import libfdt" | $(PYTHON3) 2>/dev/null; then \
-						echo '*** pylibfdt does not seem to be available with $(PYTHON3)'; \
-						false; \
-					fi; \
-				fi; \
-			fi; \
-		fi; \
-	fi
+	$(Q)$(MAKE) $(build)=scripts/dtc
 
 # ---------------------------------------------------------------------------
 quiet_cmd_cpp_lds = LDS     $@
diff --git a/doc/build/gcc.rst b/doc/build/gcc.rst
index 682051ab..a7f410c9 100644
--- a/doc/build/gcc.rst
+++ b/doc/build/gcc.rst
@@ -131,27 +131,6 @@ Further important build parameters are
 * O=<dir> - generate all output files in directory <dir>, including .config
 * V=1 - verbose build
 
-Devicetree compiler
-~~~~~~~~~~~~~~~~~~~
-
-Boards that use `CONFIG_OF_CONTROL` (i.e. almost all of them) need the
-devicetree compiler (dtc). Those with `CONFIG_PYLIBFDT` need pylibfdt, a Python
-library for accessing devicetree data. Suitable versions of these are included
-in the U-Boot tree in `scripts/dtc` and built automatically as needed.
-
-To use the system versions of these, use the DTC parameter, for example
-
-.. code-block:: bash
-
-    DTC=/usr/bin/dtc make
-
-In this case, dtc and pylibfdt are not built. The build checks that the version
-of dtc is new enough. It also makes sure that pylibfdt is present, if needed
-(see `scripts_dtc` in the Makefile).
-
-Note that the :doc:`tools` are always built with the included version of libfdt
-so it is not possible to build U-Boot tools with a system libfdt, at present.
-
 Other build targets
 ~~~~~~~~~~~~~~~~~~~
 
diff --git a/dts/Kconfig b/dts/Kconfig
index f1d05cc0..cdaa2037 100644
--- a/dts/Kconfig
+++ b/dts/Kconfig
@@ -4,6 +4,9 @@
 
 config SUPPORT_OF_CONTROL
 	bool
+ 
+config DTC
+	bool
 
 config PYLIBFDT
 	bool
@@ -21,6 +24,7 @@ menu "Device Tree Control"
 
 config OF_CONTROL
 	bool "Run-time configuration via Device Tree"
+	select DTC
 	select OF_LIBFDT if !OF_PLATDATA
 	select OF_REAL if !OF_PLATDATA
 	help
diff --git a/scripts/Makefile b/scripts/Makefile
index 8731e6ce..1414730d 100644
--- a/scripts/Makefile
+++ b/scripts/Makefile
@@ -10,3 +10,4 @@ always		:= $(hostprogs-y)
 
 # Let clean descend into subdirs
 subdir-	+= basic kconfig dtc
+subdir-$(CONFIG_DTC) += dtc
diff --git a/scripts/dtc-version.sh b/scripts/dtc-version.sh
index bfb514e1..bd4e818e 100644
--- a/scripts/dtc-version.sh
+++ b/scripts/dtc-version.sh
@@ -10,16 +10,11 @@
 dtc="$*"
 
 if [ ${#dtc} -eq 0 ]; then
-	echo "Error: No dtc command specified"
+	echo "Error: No dtc command specified."
 	printf "Usage:\n\t$0 <dtc-command>\n"
 	exit 1
 fi
 
-if ! which $dtc >/dev/null ; then
-	echo "Error: Cannot find dtc: $dtc"
-	exit 1
-fi
-
 MAJOR=$($dtc -v | head -1 | awk '{print $NF}' | cut -d . -f 1)
 MINOR=$($dtc -v | head -1 | awk '{print $NF}' | cut -d . -f 2)
 PATCH=$($dtc -v | head -1 | awk '{print $NF}' | cut -d . -f 3 | cut -d - -f 1)
-- 
2.37.3.windows.1

